
/**
 * File generated by Atek tsgen
 * env=host
 * DO NOT MODIFY
 */
import { URL } from 'url';
import { ApiBrokerClient } from '@atek-cloud/api-broker';

export const ID = "atek.cloud/adb-api";
export const REVISION = undefined;

export default class AdbApiClient extends ApiBrokerClient {
  constructor() {
    super("atek.cloud/adb-api")
  }

  describe(dbId: string): Promise<DbDescription> {
    return this.$rpc("describe", [dbId])
  }

  table(dbId: string, tableId: string, desc: TableSettings): Promise<TableDescription> {
    return this.$rpc("table", [dbId, tableId, desc])
  }

  list(dbId: string, tableId: string, opts?: ListOpts): Promise<{ records: Record[]; }> {
    return this.$rpc("list", [dbId, tableId, opts])
  }

  get(dbId: string, tableId: string, key: string): Promise<Record> {
    return this.$rpc("get", [dbId, tableId, key])
  }

  create(dbId: string, tableId: string, value: object, blobs?: BlobMap): Promise<Record> {
    return this.$rpc("create", [dbId, tableId, value, blobs])
  }

  put(dbId: string, tableId: string, key: string, value: object): Promise<Record> {
    return this.$rpc("put", [dbId, tableId, key, value])
  }

  delete(dbId: string, tableId: string, key: string): Promise<void> {
    return this.$rpc("delete", [dbId, tableId, key])
  }

  diff(dbId: string, opts: {left: number, right?: number, tableIds?: string[]}): Promise<Diff[]> {
    return this.$rpc("diff", [dbId, opts])
  }

  getBlob(dbId: string, tableId: string, key: string, blobName: string): Promise<Blob> {
    return this.$rpc("getBlob", [dbId, tableId, key, blobName])
  }

  putBlob(dbId: string, tableId: string, key: string, blobName: string, blobValue: BlobDesc): Promise<void> {
    return this.$rpc("putBlob", [dbId, tableId, key, blobName, blobValue])
  }

  delBlob(dbId: string, tableId: string, key: string, blobName: string): Promise<void> {
    return this.$rpc("delBlob", [dbId, tableId, key, blobName])
  }

  subscribe(dbId: string, opts?: {tableIds?: string[]}): DbSubscription {
    return this.$subscribe([dbId, opts])
  }
}

export interface DbSubscription {
  on(name: "change", handler: (evt: Diff) => void): void;
}

export interface DbDescription {
  dbId: string;
  dbType: string;
  displayName?: string;
  tables: TableDescription[];
}

export interface TableTemplates {
  table?: {
      title?: string
      description?: string
    };
  record?: {
      key?: string
      title?: string
      description?: string
    };
}

export interface TableSettings {
  revision?: number;
  templates?: TableTemplates;
  definition?: object;
}

export interface TableDescription extends TableSettings {
  tableId: string;
}

export interface Record {
  key: string;
  path: string;
  url: string;
  seq?: number;
  value: object;
}

export interface BlobMap {
  [blobName: string]: BlobDesc;
}

export interface BlobDesc {
  mimeType?: string;
  buf: Buffer;
}

export interface Blob {
  start: number;
  end: number;
  mimeType?: string;
  buf: Buffer;
}

export interface Diff {
  left: Record;
  right: Record;
}

export interface ListOpts {
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  limit?: number;
  reverse?: boolean;
}
